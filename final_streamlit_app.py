# -*- coding: utf-8 -*-
"""FINAL streamlit APP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qY959HsgPBcFvwlPgF8b3w5-yVFbjErh
"""

# --- INSTALLATION AND SETUP ---
print("Installing required Python libraries...")
!pip install streamlit --quiet
!pip install pandas --quiet
!pip install openpyxl --quiet
!pip install seaborn --quiet
!pip install matplotlib --quiet
!pip install pyngrok --quiet
print("Python libraries installed successfully.")

!pip install faker

!pip install streamlit pyngrok faker sdv pandas numpy

!pip install --upgrade pip
# Optional: install sdv only if you want CTGAN (heavy; may take a while). If you don't need CTGAN, skip this line.
!pip install sdv

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from faker import Faker
# import seaborn as sns
# import matplotlib.pyplot as plt
# from io import BytesIO
# 
# # Try to import SDV (CTGAN). If not available, we handle gracefully.
# try:
#     from sdv.single_table import CTGANSynthesizer
#     from sdv.metadata import SingleTableMetadata
#     SDV_AVAILABLE = True
# except Exception:
#     CTGANSynthesizer = None
#     SingleTableMetadata = None
#     SDV_AVAILABLE = False
# 
# # Page setup
# st.set_page_config(page_title="Data Synthesis App", page_icon="🧬", layout="wide")
# 
# # Custom CSS (kept simple & compatible)
# st.markdown("""
#     <style>
#         /* App background */
#         .reportview-container {
#             background: linear-gradient(135deg, #f6f9fc 0%, #e8f0fb 100%);
#         }
#         /* Sidebar */
#         .css-1d391kg, .css-1d391kg .css-1v3fvcr {
#             background-color: #0b3d91 !important;
#             color: white !important;
#         }
#         /* Titles */
#         .main-title {
#             font-size: 2.1rem;
#             font-weight: 700;
#             color: #002b5c;
#         }
#         .section-sub {
#             color: #0b4f6c;
#             font-weight: 600;
#         }
#         /* Buttons */
#         div.stButton > button {
#             background-color: #0b66b2;
#             color: white;
#             border-radius: 8px;
#             padding: 6px 12px;
#         }
#         div.stButton > button:hover {
#             background-color: #084f86;
#         }
#         /* Card */
#         .card {
#             background: rgba(255,255,255,0.85);
#             padding: 12px;
#             border-radius: 12px;
#             box-shadow: 0 4px 14px rgba(0,0,0,0.08);
#             margin-bottom: 12px;
#         }
#     </style>
# """, unsafe_allow_html=True)
# 
# # Sidebar
# st.sidebar.title("📍 Navigation")
# page = st.sidebar.radio("Go to:", ["🏠 Home", "📂 Upload Data", "🧪 Synthesization", "📊 Analysis", "📘 User Guide", "📩 Contact"])
# 
# # Ensure session state keys exist
# if "df" not in st.session_state:
#     st.session_state.df = None
# if "synth_df" not in st.session_state:
#     st.session_state.synth_df = None
# 
# # --- HOME ---
# if page == "🏠 Home":
#     st.markdown('<div class="main-title">🏠 Data Synthesis App</div>', unsafe_allow_html=True)
#     st.markdown('<div class="card"><b>What you can do:</b><ul>'
#                 '<li>Upload any CSV / Excel dataset</li>'
#                 '<li>Generate synthetic data (Faker or CTGAN)</li>'
#                 '<li>Quick analysis & download</li></ul></div>', unsafe_allow_html=True)
#     st.image("https://via.placeholder.com/1100x350/0b3d91/ffffff?text=Data+Synthesis+Dashboard", use_container_width=True)
# 
# # --- UPLOAD DATA ---
# elif page == "📂 Upload Data":
#     st.markdown('<div class="main-title">📂 Upload Your Dataset</div>', unsafe_allow_html=True)
#     uploaded = st.file_uploader("Upload CSV / Excel / JSON", type=["csv", "xlsx", "json"])
#     if uploaded is not None:
#         try:
#             if uploaded.name.endswith(".csv"):
#                 df = pd.read_csv(uploaded)
#             elif uploaded.name.endswith(".xlsx"):
#                 df = pd.read_excel(uploaded)
#             else:
#                 df = pd.read_json(uploaded)
#             st.session_state.df = df
#             st.success(f"Loaded {uploaded.name} — {df.shape[0]} rows × {df.shape[1]} cols")
#             st.dataframe(df.head())
#             st.markdown(f"**Columns:** {', '.join(map(str, df.columns[:20]))}" + ("..." if len(df.columns) > 20 else ""))
#         except Exception as e:
#             st.error(f"Error loading file: {e}")
# 
# # --- SYNTHESIZATION ---
# elif page == "🧪 Synthesization":
#     st.markdown('<div class="main-title">🧪 Generate Synthetic Data</div>', unsafe_allow_html=True)
#     st.markdown('<div class="card"><span class="section-sub">Choose method</span></div>', unsafe_allow_html=True)
# 
#     method = st.radio("Synthesis method:", ["Faker (Demo)", "CTGAN (From uploaded data)"])
#     n = st.number_input("Number of rows to generate", min_value=10, max_value=10000, value=200, step=10)
# 
#     if method == "CTGAN (From uploaded data)" and not SDV_AVAILABLE:
#         st.warning("CTGAN (sdv) is not available in this environment. Run `!pip install sdv` in your notebook and restart the runtime, or use Faker for demo data.")
#     else:
#         if st.button("Generate"):
#             # Faker demo
#             if method == "Faker (Demo)":
#                 fake = Faker()
#                 rows = []
#                 for _ in range(n):
#                     rows.append({
#                         "name": fake.name(),
#                         "email": fake.email(),
#                         "age": fake.random_int(min=18, max=80),
#                         "city": fake.city(),
#                         "salary": fake.random_int(min=30000, max=150000)
#                     })
#                 synth = pd.DataFrame(rows)
#                 st.session_state.synth_df = synth
#                 st.success(f"Generated {len(synth)} demo rows with Faker")
#                 st.dataframe(synth.head())
#             # CTGAN flow
#             else:
#                 if st.session_state.df is None:
#                     st.error("Please upload a dataset first on the 'Upload Data' page.")
#                 else:
#                     df_real = st.session_state.df.copy()
#                     with st.spinner("Training CTGAN on your dataset — this may take a while..."):
#                         try:
#                             metadata = SingleTableMetadata()
#                             metadata.detect_from_dataframe(df_real)
#                             synthesizer = CTGANSynthesizer(metadata)
#                             synthesizer.fit(df_real)
#                             synth = synthesizer.sample(num_rows=n)
#                             st.session_state.synth_df = synth
#                             st.success(f"Generated {len(synth)} rows with CTGAN")
#                             st.dataframe(synth.head())
#                         except Exception as e:
#                             st.error(f"CTGAN error: {e}")
# 
# # --- ANALYSIS ---
# elif page == "📊 Analysis":
#     st.markdown('<div class="main-title">📊 Analysis</div>', unsafe_allow_html=True)
#     if st.session_state.synth_df is None:
#         st.info("No synthetic data yet — generate some on the Synthesization page.")
#     else:
#         df_s = st.session_state.synth_df
#         st.subheader("Preview")
#         st.dataframe(df_s.head())
# 
#         csv_data = df_s.to_csv(index=False).encode("utf-8")
#         st.download_button("⬇️ Download synthetic CSV", data=csv_data, file_name="synthetic_data.csv", mime="text/csv")
# 
#         # Quick numeric analysis and heatmap
#         num_cols = df_s.select_dtypes(include=[np.number]).columns.tolist()
#         if len(num_cols) > 0:
#             st.subheader("Numeric summary")
#             st.write(df_s[num_cols].describe())
# 
#             st.subheader("Correlation heatmap")
#             corr = df_s[num_cols].corr()
#             fig, ax = plt.subplots(figsize=(6, 4))
#             sns.heatmap(corr, annot=True, fmt=".2f", cmap="Blues", ax=ax)
#             st.pyplot(fig)
#             plt.close(fig)
#         else:
#             st.info("No numeric columns found in the synthetic dataset to analyze.")
# 
# # --- USER GUIDE ---
# elif page == "📘 User Guide":
#     st.markdown('<div class="main-title">📘 User Guide</div>', unsafe_allow_html=True)
#     st.markdown("""
#     **Quick steps**
#     1. Upload dataset (CSV/Excel/JSON) on Upload Data.
#     2. Go to Synthesization → choose method (Faker for demo or CTGAN from your data).
#     3. Generate and then review on Analysis.
#     4. Download synthetic CSV for downstream use.
#     """, unsafe_allow_html=True)
# 
# # --- CONTACT ---
# elif page == "📩 Contact":
#     st.markdown('<div class="main-title">📩 Contact</div>', unsafe_allow_html=True)
#     st.markdown("""
#     - Developer: Aqsaa Iqbal
#     - Email: support@datasynthapp.com
#     """, unsafe_allow_html=True)
# 
# # Sidebar footer
# st.sidebar.markdown("---")
# st.sidebar.markdown("Built with ❤️ • Streamlit")
#

# --- RUN THE APP ---
# This cell can be re-run whenever you need to restart the app.
import time
from google.colab import output

print("### 🚀 Starting the Streamlit app...")

# Start the Streamlit app in the background
!nohup streamlit run app.py --server.port 8501 > output.log 2>&1 &
time.sleep(5)  # Give Streamlit a moment to start

# Use Colab's built-in function to serve the port as a URL
output.serve_kernel_port_as_window(8501)

print("### ✅ Your Streamlit App is Ready!")
print("A new window or tab should have opened with your app.")